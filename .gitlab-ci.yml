stages:
  - test
  - build
  - upload

# ---------- Templates -------------

.template-export: &template-export
  stage: build
  image: mrminimal/godot-desktop-export:3.1.1
  script:
  - mkdir -p export
  - cd Scramble-$TYPE
  - godot -v --export $PLATFORM ../Scramble-$TYPE.$EXTENSION
  - if ! test -f ../Scramble-$TYPE.$EXTENSION; then exit 1; fi
  artifacts:
    name: Scramble-$TYPE-$CI_BUILD_REF
    paths:
    - Scramble-$TYPE.$EXTENSION
    - Scramble-$TYPE.pck
    expire_in: 1 day

.template-skip-lfs: &template-skip-lfs
  variables:
    GIT_LFS_SKIP_SMUDGE: "1"

.template-only-build-code: &template-only-build-code
  only:
    changes:
    - Scramble-*/**/*

# -------------- Jobs --------------

license-header:
  stage: test
  image: alpine
  <<: *template-skip-lfs
  <<: *template-only-build-code
  script:
  - .gitlab/licenseHeaderCheck.sh .gitlab/license/LICENSE_HEADER

file-naming:
  stage: test
  image: alpine
  <<: *template-skip-lfs
  <<: *template-only-build-code
  script:
  - apk update && apk add bash
  - ./.gitlab/fileNamingConventionCheck.sh

global-logging:
  stage: test
  image: alpine
  <<: *template-skip-lfs
  <<: *template-only-build-code
  script:
  - apk update && apk add grep
  - ./.gitlab/scrambleLoggingCheck.sh

# Client exports

linux-client:build:
  <<: *template-export
  variables:
    TYPE: "client"
    PLATFORM: "linux"
    EXTENSION: "x64"

mac-client:build:
  <<: *template-export
  <<: *template-only-build-code
  variables:
    TYPE: "client"
    PLATFORM: "mac"
    EXTENSION: "x64"

windows-client:build:
  <<: *template-export
  <<: *template-only-build-code
  variables:
    TYPE: "client"
    PLATFORM: "windows"
    EXTENSION: "exe"

# Server exports

linux-server:build:
  <<: *template-export
  <<: *template-only-build-code
  variables:
    TYPE: "server"
    PLATFORM: "linux"
    EXTENSION: "x64"

mac-server:build:
  <<: *template-export
  <<: *template-only-build-code
  variables:
    TYPE: "server"
    PLATFORM: "mac"
    EXTENSION: "x64"

windows-server:build:
  <<: *template-export
  <<: *template-only-build-code
  variables:
    TYPE: "server"
    PLATFORM: "windows"
    EXTENSION: "exe"

# Upload

linux-client:upload:
  stage: upload
  image: alpine
  needs: ["linux-client:build"]
  dependencies:
  - linux-client:build
  script:
  - echo "testing"
  except:
  - branches

